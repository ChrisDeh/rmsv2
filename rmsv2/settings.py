"""
Django settings for rmsv2 project.

Generated by 'django-admin startproject' using Django 2.0.1.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""

import os
import socket
from .lib.configreader import config

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '*!^acj_)ebf_3ftw#2@()4*g!-a)un+)dn$q!7_t@=po(4#lg&'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']

# subpath Settings for installation on webserver subpath

SUB_PATH = config.get('general', 'webserver_subpath', fallback='')


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.forms',
    'djmoney',
    'rms.apps.RmsConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'rmsv2.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR,  'templates'),
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'rms.context_processors.categories',
                'rms.context_processors.menu_notifications',
            ],
        },
    },
]

FORM_RENDERER = 'django.forms.renderers.TemplatesSetting'

WSGI_APPLICATION = 'rmsv2.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': config.get('database', 'db_name', fallback='rms'),
        'USER': config.get('database', 'user', fallback='user'),
        'PASSWORD': config.get('database', 'password', fallback='rms'),
        'HOST': socket.gethostbyname(config.get('database', 'host', fallback='localhost')),
        'PORT': config.get('database', 'port', fallback=''),
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = 'de'

TIME_ZONE = 'Europe/Berlin'

USE_I18N = True

USE_L10N = True

USE_TZ = True

USE_THOUSAND_SEPARATOR = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/

STATIC_URL = SUB_PATH+'/static/'

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static"),
]

LOGIN_REDIRECT_URL = SUB_PATH+'/'
LOGOUT_REDIRECT_URL = SUB_PATH+'/'
LOGIN_URL = SUB_PATH+'/login/'

# Company

COMPANY_NAME = config.get('general', 'company_name', fallback=None)
COMPANY_SHORT = config.get('general', 'company_short', fallback=None)

if COMPANY_NAME is None or COMPANY_SHORT is None:
    print('Please specify company name and company short')
    exit(1)

# Email settings

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'

EMAIL_HOST = config.get('mail', 'host', fallback=None)
EMAIL_PORT = config.get('mail', 'port', fallback=587)
EMAIL_HOST_USER = config.get('mail', 'user', fallback=None)
EMAIL_HOST_PASSWORD = config.get('mail', 'password', fallback=None)
EMAIL_USE_TLS = True if config.get('mail', 'tls', fallback='yes') == 'yes' else False

if EMAIL_HOST is None or EMAIL_HOST_USER is None or EMAIL_HOST_PASSWORD is None:
    print('Email unconfigured!')
    exit(1)

# PDF options
PDF_BACKGROUND = config.get('pdf', 'background', fallback=None)
if PDF_BACKGROUND is not None:
    PDF_BACKGROUND = os.path.join(BASE_DIR, PDF_BACKGROUND)
PDF_FROM_LINE = config.get('pdf', 'from', fallback='')
PDF_SAVE_TOP = config.getint('pdf', 'save-top', fallback=20)
PDF_SAVE_BOTTOM = config.getint('pdf', 'save-bottom', fallback=20)
